import{u as H,a as W,o as P,_ as V,c as R,r as N,b as $}from"./utils.BHC3aNAl.js";import{P as O,_ as J,k as Z,j as G,l as U}from"./theme.XNl5CM54.js";import{d as z,r as m,y as A,j as k,g as Y,o as l,c as h,a as r,q as o,w as D,F as X,p as Q,z as n,e as K,n as ss,m as y,t as w,f as v,Q as is,_ as ns}from"./framework.B_10QUfm.js";const e=JSON.parse(`{"step-1":{"App":{"template.html":"<h1>Hello World!</h1>\\n"},"description.md":"<h1 id=\\"getting-started\\" tabindex=\\"-1\\">Getting Started <a class=\\"header-anchor\\" href=\\"#getting-started\\" aria-label=\\"Permalink to &quot;Getting Started {#getting-started}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>Welcome to the Vue tutorial!</p>\\n<p>The goal of this tutorial is to quickly give you an experience of what it feels like to work with Vue, right in the browser. It does not aim to be comprehensive, and you don't need to understand everything before moving on. However, after you complete it, make sure to also read the <a target=\\"_blank\\" href=\\"/guide/introduction.html\\">Guide</a> which covers each topic in more detail.</p>\\n<h2 id=\\"prerequisites\\" tabindex=\\"-1\\">Prerequisites <a class=\\"header-anchor\\" href=\\"#prerequisites\\" aria-label=\\"Permalink to &quot;Prerequisites {#prerequisites}&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>The tutorial assumes basic familiarity with HTML, CSS and JavaScript. If you are totally new to front-end development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.</p>\\n<h2 id=\\"how-to-use-this-tutorial\\" tabindex=\\"-1\\">How to Use This Tutorial <a class=\\"header-anchor\\" href=\\"#how-to-use-this-tutorial\\" aria-label=\\"Permalink to &quot;How to Use This Tutorial {#how-to-use-this-tutorial}&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>You can edit the code <span class=\\"wide\\">on the right</span><span class=\\"narrow\\">below</span> and see the result update instantly. Each step will introduce a core feature of Vue, and you will be expected to complete the code to get the demo working. If you get stuck, you will have a &quot;Show me!&quot; button that reveals the working code for you. Try not to rely on it too much - you'll learn faster by figuring things out on your own.</p>\\n<p>If you are an experienced developer coming from Vue 2 or other frameworks, there are a few settings you can tweak to make the best use of this tutorial. If you are a beginner, it's recommended to go with the defaults.</p>\\n<details>\\n<summary>Tutorial Setting Details</summary>\\n<ul>\\n<li>\\n<p>Vue offers two API styles: Options API and Composition API. This tutorial is designed to work for both - you can choose your preferred style using the <strong>API Preference</strong> switches at the top. <a target=\\"_blank\\" href=\\"/guide/introduction.html#api-styles\\">Learn more about API styles</a>.</p>\\n</li>\\n<li>\\n<p>You can also switch between SFC-mode or HTML-mode. The former will show code examples in <a target=\\"_blank\\" href=\\"/guide/introduction.html#single-file-components\\">Single-File Component</a> (SFC) format, which is what most developers use when they use Vue with a build step. HTML-mode shows usage without a build step.</p>\\n</li>\\n</ul>\\n<div class=\\"html\\">\\n<div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">TIP</p>\\n<p>If you're about to use HTML-mode without a build step in your own applications, make sure you either change imports to:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ... } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue/dist/vue.esm-bundler.js'</span></span></code></pre>\\n</div><p>inside your scripts or configure your build tool to resolve <code>vue</code> accordingly. Sample config for <a href=\\"https://vitejs.dev/\\" target=\\"_blank\\" rel=\\"noreferrer\\">Vite</a>:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// vite.config.js</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  resolve: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    alias: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      vue: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'vue/dist/vue.esm-bundler.js'</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>See the respective <a href=\\"/guide/scaling-up/tooling.html#note-on-in-browser-template-compilation\\">section in Tooling guide</a> for more information.</p>\\n</div>\\n</div>\\n</details>\\n<p>Ready? Click &quot;Next&quot; to get started.</p>\\n"},"step-10":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const todoId = ref(1)\\n    const todoData = ref(null)\\n\\n    async function fetchData() {\\n      todoData.value = null\\n      const res = await fetch(\\n        \`https://jsonplaceholder.typicode.com/todos/\${todoId.value}\`\\n      )\\n      todoData.value = await res.json()\\n    }\\n\\n    fetchData()\\n\\n    return {\\n      todoId,\\n      todoData\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      todoId: 1,\\n      todoData: null\\n    }\\n  },\\n  methods: {\\n    async fetchData() {\\n      this.todoData = null\\n      const res = await fetch(\\n        \`https://jsonplaceholder.typicode.com/todos/\${this.todoId}\`\\n      )\\n      this.todoData = await res.json()\\n    }\\n  },\\n  mounted() {\\n    this.fetchData()\\n  }\\n}\\n","template.html":"<p>Todo id: {{ todoId }}</p>\\n<button @click=\\"todoId++\\" :disabled=\\"!todoData\\">Fetch next todo</button>\\n<p v-if=\\"!todoData\\">Loading...</p>\\n<pre v-else>{{ todoData }}</pre>\\n"},"description.md":"<h1 id=\\"watchers\\" tabindex=\\"-1\\">Watchers <a class=\\"header-anchor\\" href=\\"#watchers\\" aria-label=\\"Permalink to &quot;Watchers {#watchers}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>Sometimes we may need to perform &quot;side effects&quot; reactively - for example, logging a number to the console when it changes. We can achieve this with watchers:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ref, watch } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">watch</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(count, (</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">newCount</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // yes, console.log() is a side effect</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  console.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">log</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\`new count is: \${</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">newCount</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">}\`</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div><p><code>watch()</code> can directly watch a ref, and the callback gets fired whenever <code>count</code>'s value changes. <code>watch()</code> can also watch other types of data sources - more details are covered in <a target=\\"_blank\\" href=\\"/guide/essentials/watchers.html\\">Guide - Watchers</a>.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  watch: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    count</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">newCount</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // yes, console.log() is a side effect</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      console.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">log</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\`new count is: \${</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">newCount</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">}\`</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>Here, we are using the <code>watch</code> option to watch changes to the <code>count</code> property. The watch callback is called when <code>count</code> changes, and receives the new value as the argument. More details are covered in <a target=\\"_blank\\" href=\\"/guide/essentials/watchers.html\\">Guide - Watchers</a>.</p>\\n</div>\\n<p>A more practical example than logging to the console would be fetching new data when an ID changes. The code we have is fetching todos data from a mock API on component mount. There is also a button that increments the todo ID that should be fetched. Try to implement a watcher that fetches a new todo when the button is clicked.</p>\\n","_hint":{"App":{"composition.js":"import { ref, watch } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const todoId = ref(1)\\n    const todoData = ref(null)\\n\\n    async function fetchData() {\\n      todoData.value = null\\n      const res = await fetch(\\n        \`https://jsonplaceholder.typicode.com/todos/\${todoId.value}\`\\n      )\\n      todoData.value = await res.json()\\n    }\\n\\n    fetchData()\\n\\n    watch(todoId, fetchData)\\n\\n    return {\\n      todoId,\\n      todoData\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      todoId: 1,\\n      todoData: null\\n    }\\n  },\\n  methods: {\\n    async fetchData() {\\n      this.todoData = null\\n      const res = await fetch(\\n        \`https://jsonplaceholder.typicode.com/todos/\${this.todoId}\`\\n      )\\n      this.todoData = await res.json()\\n    }\\n  },\\n  mounted() {\\n    this.fetchData()\\n  },\\n  watch: {\\n    todoId() {\\n      this.fetchData()\\n    }\\n  }\\n}\\n","template.html":"<p>Todo id: {{ todoId }}</p>\\n<button @click=\\"todoId++\\" :disabled=\\"!todoData\\">Fetch next todo</button>\\n<p v-if=\\"!todoData\\">Loading...</p>\\n<pre v-else>{{ todoData }}</pre>\\n"},"description.md":{}}},"step-11":{"App":{"composition.js":"export default {\\n  // register child component\\n}\\n","options.js":"export default {\\n  // register child component\\n}\\n","template.html":"<!-- render child component -->\\n"},"ChildComp":{"template.html":"<h2>A Child Component!</h2>\\n"},"description.md":"<h1 id=\\"components\\" tabindex=\\"-1\\">Components <a class=\\"header-anchor\\" href=\\"#components\\" aria-label=\\"Permalink to &quot;Components {#components}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>So far, we've only been working with a single component. Real Vue applications are typically created with nested components.</p>\\n<p>A parent component can render another component in its template as a child component. To use a child component, we need to first import it:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ChildComp </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> './ChildComp.vue'</span></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ChildComp </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> './ChildComp.vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  components: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ChildComp</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>We also need to register the component using the <code>components</code> option. Here we are using the object property shorthand to register the <code>ChildComp</code> component under the <code>ChildComp</code> key.</p>\\n</div>\\n</div>\\n<div class=\\"sfc\\">\\n<p>Then, we can use the component in the template as:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">ChildComp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> /></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> ChildComp </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> './ChildComp.js'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  components: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ChildComp</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div><p>We also need to register the component using the <code>components</code> option. Here we are using the object property shorthand to register the <code>ChildComp</code> component under the <code>ChildComp</code> key.</p>\\n<p>Because we are writing the template in the DOM, it will be subject to browser's parsing rules, which is case-insensitive for tag names. Therefore, we need to use the kebab-cased name to reference the child component:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>Now try it yourself - import the child component and render it in the template.</p>\\n","_hint":{"App":{"composition.js":"import ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  }\\n}\\n","options.js":"import ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  }\\n}\\n","template.html":"<ChildComp />\\n"},"ChildComp":{"template.html":"<h2>A Child Component!</h2>\\n"},"description.md":{}}},"step-12":{"App":{"composition.js":"import { ref } from 'vue'\\nimport ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const greeting = ref('Hello from parent')\\n\\n    return {\\n      greeting\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      greeting: 'Hello from parent'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp />\\n"},"ChildComp":{"composition.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","template.html":"<h2>{{ msg || 'No props passed yet' }}</h2>\\n"},"description.md":"<h1 id=\\"props\\" tabindex=\\"-1\\">Props <a class=\\"header-anchor\\" href=\\"#props\\" aria-label=\\"Permalink to &quot;Props {#props}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>A child component can accept input from the parent via <strong>props</strong>. First, it needs to declare the props it accepts:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">vue</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">&#x3C;!-- ChildComp.vue --></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> props</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> defineProps</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  msg: String</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>Note <code>defineProps()</code> is a compile-time macro and doesn't need to be imported. Once declared, the <code>msg</code> prop can be used in the child component's template. It can also be accessed in JavaScript via the returned object of <code>defineProps()</code>.</p>\\n</div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// in child component</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  props: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    msg: String</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">props</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // access props.msg</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>Once declared, the <code>msg</code> prop is exposed on <code>this</code> and can be used in the child component's template. The received props are passed to <code>setup()</code> as the first argument.</p>\\n</div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// in child component</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  props: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    msg: String</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>Once declared, the <code>msg</code> prop is exposed on <code>this</code> and can be used in the child component's template.</p>\\n</div>\\n<p>The parent can pass the prop to the child just like attributes. To pass a dynamic value, we can also use the <code>v-bind</code> syntax:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">ChildComp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">msg</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">greeting</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> /></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">msg</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">greeting</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>Now try it yourself in the editor.</p>\\n","_hint":{"App":{"template.html":"<ChildComp :msg=\\"greeting\\" />\\n","composition.js":"import { ref } from 'vue'\\nimport ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const greeting = ref('Hello from parent')\\n\\n    return {\\n      greeting\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      greeting: 'Hello from parent'\\n    }\\n  }\\n}\\n"},"ChildComp":{"composition.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","template.html":"<h2>{{ msg || 'No props passed yet' }}</h2>\\n"},"description.md":{}}},"step-13":{"App":{"composition.js":"import { ref } from 'vue'\\nimport ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const childMsg = ref('No child msg yet')\\n\\n    return {\\n      childMsg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      childMsg: 'No child msg yet'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp />\\n<p>{{ childMsg }}</p>\\n"},"ChildComp":{"composition.js":"export default {\\n  emits: ['response'],\\n  setup(props, { emit }) {\\n    emit('response', 'hello from child')\\n    return {}\\n  }\\n}\\n","options.js":"export default {\\n  emits: ['response'],\\n  created() {\\n    this.$emit('response', 'hello from child')\\n  }\\n}\\n","template.html":"<h2>Child component</h2>\\n"},"description.md":"<h1 id=\\"emits\\" tabindex=\\"-1\\">Emits <a class=\\"header-anchor\\" href=\\"#emits\\" aria-label=\\"Permalink to &quot;Emits {#emits}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>In addition to receiving props, a child component can also emit events to the parent:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">vue</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// declare emitted events</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> emit</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> defineEmits</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">([</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'response'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// emit with argument</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">emit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'response'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'hello from child'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // declare emitted events</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  emits: [</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'response'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">props</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, { </span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">emit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> }) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // emit with argument</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    emit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'response'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'hello from child'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // declare emitted events</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  emits: [</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'response'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">],</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  created</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // emit with argument</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">    this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">$emit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'response'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'hello from child'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<p>The first argument to <span class=\\"options-api\\"><code>this.$emit()</code></span><span class=\\"composition-api\\"><code>emit()</code></span> is the event name. Any additional arguments are passed on to the event listener.</p>\\n<p>The parent can listen to child-emitted events using <code>v-on</code> - here the handler receives the extra argument from the child emit call and assigns it to local state:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">ChildComp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> @</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">response</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">msg</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> childMsg </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> msg</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> /></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> @</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">response</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">msg</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> childMsg </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> msg</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>Now try it yourself in the editor.</p>\\n","_hint":{"App":{"template.html":"<ChildComp @response=\\"(msg) => childMsg = msg\\" />\\n<p>{{ childMsg }}</p>\\n","composition.js":"import { ref } from 'vue'\\nimport ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const childMsg = ref('No child msg yet')\\n\\n    return {\\n      childMsg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      childMsg: 'No child msg yet'\\n    }\\n  }\\n}\\n"},"ChildComp":{"composition.js":"export default {\\n  emits: ['response'],\\n  setup(props, { emit }) {\\n    emit('response', 'hello from child')\\n    return {}\\n  }\\n}\\n","options.js":"export default {\\n  emits: ['response'],\\n  created() {\\n    this.$emit('response', 'hello from child')\\n  }\\n}\\n","template.html":"<h2>Child component</h2>\\n"},"description.md":{}}},"step-14":{"App":{"composition.js":"import { ref } from 'vue'\\nimport ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const msg = ref('from parent')\\n\\n    return {\\n      msg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      msg: 'from parent'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp></ChildComp>\\n"},"ChildComp":{"template.html":"<slot>Fallback content</slot>\\n"},"description.md":"<h1 id=\\"slots\\" tabindex=\\"-1\\">Slots <a class=\\"header-anchor\\" href=\\"#slots\\" aria-label=\\"Permalink to &quot;Slots {#slots}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>In addition to passing data via props, the parent component can also pass down template fragments to the child via <strong>slots</strong>:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">ChildComp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  This is some slot content!</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">ChildComp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  This is some slot content!</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">child-comp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>In the child component, it can render the slot content from the parent using the <code>&lt;slot&gt;</code> element as outlet:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">&#x3C;!-- in child template --></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">slot</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">/></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">&#x3C;!-- in child template --></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">slot</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">slot</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>Content inside the <code>&lt;slot&gt;</code> outlet will be treated as &quot;fallback&quot; content: it will be displayed if the parent did not pass down any slot content:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">slot</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>Fallback content&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">slot</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>Currently we are not passing any slot content to <code>&lt;ChildComp&gt;</code>, so you should see the fallback content. Let's provide some slot content to the child while making use of the parent's <code>msg</code> state.</p>\\n","_hint":{"App":{"template.html":"<ChildComp>Message: {{ msg }}</ChildComp>\\n","composition.js":"import { ref } from 'vue'\\nimport ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const msg = ref('from parent')\\n\\n    return {\\n      msg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from './ChildComp.vue'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      msg: 'from parent'\\n    }\\n  }\\n}\\n"},"ChildComp":{"template.html":"<slot>Fallback content</slot>\\n"},"description.md":{}}},"step-15":{"App":{"composition.js":"import JSConfetti from 'js-confetti'\\n\\nconst confetti = new JSConfetti()\\n\\nexport default {\\n  setup() {\\n    function showConfetti() {\\n      confetti.addConfetti()\\n    }\\n\\n    showConfetti()\\n\\n    return {\\n      showConfetti\\n    }\\n  }\\n}\\n","options.js":"import JSConfetti from 'js-confetti'\\n\\nconst confetti = new JSConfetti()\\n\\nexport default {\\n  mounted() {\\n    this.showConfetti()\\n  },\\n  methods: {\\n    showConfetti() {\\n      confetti.addConfetti()\\n    }\\n  }\\n}\\n","style.css":"h1 {\\n  text-align: center;\\n  cursor: pointer;\\n  margin-top: 3em;\\n}\\n","template.html":"<h1 @click=\\"showConfetti\\">🎉 Congratulations!</h1>\\n"},"description.md":"<h1 id=\\"you-did-it\\" tabindex=\\"-1\\">You Did It! <a class=\\"header-anchor\\" href=\\"#you-did-it\\" aria-label=\\"Permalink to &quot;You Did It! {#you-did-it}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>You have finished the tutorial!</p>\\n<p>At this point, you should have a good idea of what it's like to work with Vue. However, we covered a lot of things really fast and glossed over the details, so definitely keep learning! As a next step, you can:</p>\\n<ul>\\n<li>\\n<p>Set up a real Vue project on your machine by following the <a href=\\"/guide/quick-start.html\\">Quick Start</a>.</p>\\n</li>\\n<li>\\n<p>Go through the <a href=\\"/guide/essentials/application.html\\">Main Guide</a>, which covers all the topics we learned so far in greater details, and much more.</p>\\n</li>\\n<li>\\n<p>Check out some more practical <a href=\\"/examples/\\">Examples</a>.</p>\\n</li>\\n</ul>\\n<p>We can't wait to see what you build next!</p>\\n","import-map.json":"{\\n  \\"imports\\": {\\n    \\"js-confetti\\": \\"https://cdn.jsdelivr.net/npm/js-confetti/+esm\\"\\n  }\\n}\\n"},"step-2":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    // component logic\\n    // declare some reactive state here.\\n\\n    return {\\n      // exposed to template\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  // component options\\n  // declare some reactive state here.\\n}\\n","template.html":"<h1>Make me dynamic!</h1>\\n"},"description.md":"<h1 id=\\"declarative-rendering\\" tabindex=\\"-1\\">Declarative Rendering <a class=\\"header-anchor\\" href=\\"#declarative-rendering\\" aria-label=\\"Permalink to &quot;Declarative Rendering {#declarative-rendering}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<div class=\\"sfc\\">\\n<p>What you see in the editor is a Vue Single-File Component (SFC). An SFC is a reusable self-contained block of code that encapsulates HTML, CSS and JavaScript that belong together, written inside a <code>.vue</code> file.</p>\\n</div>\\n<p>The core feature of Vue is <strong>declarative rendering</strong>: using a template syntax that extends HTML, we can describe how the HTML should look based on JavaScript state. When the state changes, the HTML updates automatically.</p>\\n<div class=\\"composition-api\\">\\n<p>State that can trigger updates when changed is considered <strong>reactive</strong>. We can declare reactive state using Vue's <code>reactive()</code> API. Objects created from <code>reactive()</code> are JavaScript <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\\" target=\\"_blank\\" rel=\\"noreferrer\\">Proxies</a> that work just like normal objects:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { reactive } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> counter</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> reactive</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">console.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">log</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(counter.count) </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">counter.count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span></code></pre>\\n</div><p><code>reactive()</code> only works on objects (including arrays and built-in types like <code>Map</code> and <code>Set</code>). <code>ref()</code>, on the other hand, can take any value type and create an object that exposes the inner value under a <code>.value</code> property:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ref } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> message</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'Hello World!'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">console.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">log</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(message.value) </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// \\"Hello World!\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">message.value </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'Changed'</span></span></code></pre>\\n</div><p>Details on <code>reactive()</code> and <code>ref()</code> are discussed in <a target=\\"_blank\\" href=\\"/guide/essentials/reactivity-fundamentals.html\\">Guide - Reactivity Fundamentals</a>.</p>\\n<div class=\\"sfc\\">\\n<p>Reactive state declared in the component's <code>&lt;script setup&gt;</code> block can be used directly in the template. This is how we can render dynamic text based on the value of the <code>counter</code> object and <code>message</code> ref, using mustaches syntax:</p>\\n</div>\\n<div class=\\"html\\">\\n<p>The object being passed to <code>createApp()</code> is a Vue component. A component's state should be declared inside its <code>setup()</code> function, and returned using an object:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> counter</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> reactive</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({ count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> })</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> message</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'Hello World!'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    counter,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    message</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>Properties in the returned object will be made available in the template. This is how we can render dynamic text based on the value of <code>message</code>, using mustaches syntax:</p>\\n</div>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ message }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">p</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>Count is: {{ counter.count }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">p</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>Notice how we did not need to use <code>.value</code> when accessing the <code>message</code> ref in templates: it is automatically unwrapped for more succinct usage.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>State that can trigger updates when changed are considered <strong>reactive</strong>. In Vue, reactive state is held in components. <span class=\\"html\\">In the example code, the object being passed to <code>createApp()</code> is a component.</span></p>\\n<p>We can declare reactive state using the <code>data</code> component option, which should be a function that returns an object:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      message: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'Hello World!'</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      message: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'Hello World!'</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n<p>The <code>message</code> property will be made available in the template. This is how we can render dynamic text based on the value of <code>message</code>, using mustaches syntax:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ message }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>The content inside the mustaches is not limited to just identifiers or paths - we can use any valid JavaScript expression:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ message.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">split</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">''</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">).</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">reverse</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">join</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">''</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>Now, try to create some reactive state yourself, and use it to render dynamic text content for the <code>&lt;h1&gt;</code> in the template.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>Now, try to create a data property yourself, and use it as the text content for the <code>&lt;h1&gt;</code> in the template.</p>\\n</div>\\n","_hint":{"App":{"composition.js":"import { reactive, ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const counter = reactive({ count: 0 })\\n    const message = ref('Hello World!')\\n\\n    return {\\n      counter,\\n      message\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      message: 'Hello World!',\\n      counter: {\\n        count: 0\\n      }\\n    }\\n  }\\n}\\n","template.html":"<h1>{{ message }}</h1>\\n<p>Count is: {{ counter.count }}</p>\\n"},"description.md":{}}},"step-3":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const titleClass = ref('title')\\n\\n    return {\\n      titleClass\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      titleClass: 'title'\\n    }\\n  }\\n}\\n","style.css":".title {\\n  color: red;\\n}\\n","template.html":"<h1>Make me red</h1> <!-- add dynamic class binding here -->\\n"},"description.md":"<h1 id=\\"attribute-bindings\\" tabindex=\\"-1\\">Attribute Bindings <a class=\\"header-anchor\\" href=\\"#attribute-bindings\\" aria-label=\\"Permalink to &quot;Attribute Bindings {#attribute-bindings}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>In Vue, mustaches are only used for text interpolation. To bind an attribute to a dynamic value, we use the <code>v-bind</code> directive:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">div</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-bind</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">:</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">id</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">dynamicId</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">div</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>A <strong>directive</strong> is a special attribute that starts with the <code>v-</code> prefix. They are part of Vue's template syntax. Similar to text interpolations, directive values are JavaScript expressions that have access to the component's state. The full details of <code>v-bind</code> and directive syntax are discussed in <a target=\\"_blank\\" href=\\"/guide/essentials/template-syntax.html\\">Guide - Template Syntax</a>.</p>\\n<p>The part after the colon (<code>:id</code>) is the &quot;argument&quot; of the directive. Here, the element's <code>id</code> attribute will be synced with the <code>dynamicId</code> property from the component's state.</p>\\n<p>Because <code>v-bind</code> is used so frequently, it has a dedicated shorthand syntax:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">div</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">id</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">dynamicId</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">div</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>Now, try to add a dynamic <code>class</code> binding to the <code>&lt;h1&gt;</code>, using the <code>titleClass</code> <span class=\\"options-api\\">data property</span><span class=\\"composition-api\\">ref</span> as its value. If it's bound correctly, the text should turn red.</p>\\n","_hint":{"App":{"template.html":"<h1 :class=\\"titleClass\\">Make me red</h1>\\n","composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const titleClass = ref('title')\\n\\n    return {\\n      titleClass\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      titleClass: 'title'\\n    }\\n  }\\n}\\n","style.css":".title {\\n  color: red;\\n}\\n"},"description.md":{}}},"step-4":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const count = ref(0)\\n\\n    return {\\n      count\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      count: 0\\n    }\\n  }\\n}\\n","template.html":"<!-- make this button work -->\\n<button>Count is: {{ count }}</button>\\n"},"description.md":"<h1 id=\\"event-listeners\\" tabindex=\\"-1\\">Event Listeners <a class=\\"header-anchor\\" href=\\"#event-listeners\\" aria-label=\\"Permalink to &quot;Event Listeners {#event-listeners}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>We can listen to DOM events using the <code>v-on</code> directive:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">button</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-on</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">:</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">click</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">increment</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ count }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">button</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>Due to its frequent use, <code>v-on</code> also has a shorthand syntax:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">button</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> @</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">click</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">increment</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ count }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">button</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><div class=\\"options-api\\">\\n<p>Here, <code>increment</code> references a function declared using the <code>methods</code> option:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  },</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  methods: {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    increment</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // update component state</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">      this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  },</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  methods: {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    increment</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // update component state</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">      this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n<p>Inside a method, we can access the component instance using <code>this</code>. The component instance exposes the data properties declared by <code>data</code>. We can update the component state by mutating these properties.</p>\\n</div>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<p>Here, <code>increment</code> is referencing a function declared in <code>&lt;script setup&gt;</code>:</p>\\n<div class=\\"language-vue vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">vue</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ref } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">function</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> increment</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // update component state</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  count.value</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">script</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<p>Here, <code>increment</code> is referencing a method in the object returned from <code>setup()</code>:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  function</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> increment</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">e</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // update component state</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    count.value</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    count,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    increment</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<p>Inside the function, we can update the component state by mutating refs.</p>\\n</div>\\n<p>Event handlers can also use inline expressions, and can simplify common tasks with modifiers. These details are covered in <a target=\\"_blank\\" href=\\"/guide/essentials/event-handling.html\\">Guide - Event Handling</a>.</p>\\n<p>Now, try to implement the <code>increment</code> <span class=\\"options-api\\">method</span><span class=\\"composition-api\\">function</span> yourself and bind it to the button using <code>v-on</code>.</p>\\n","_hint":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const count = ref(0)\\n\\n    function increment() {\\n      count.value++\\n    }\\n\\n    return {\\n      count,\\n      increment\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      count: 0\\n    }\\n  },\\n  methods: {\\n    increment() {\\n      this.count++\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"increment\\">Count is: {{ count }}</button>\\n"},"description.md":{}}},"step-5":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const text = ref('')\\n\\n    function onInput(e) {\\n      text.value = e.target.value\\n    }\\n\\n    return {\\n      text,\\n      onInput\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      text: ''\\n    }\\n  },\\n  methods: {\\n    onInput(e) {\\n      this.text = e.target.value\\n    }\\n  }\\n}\\n","template.html":"<input :value=\\"text\\" @input=\\"onInput\\" placeholder=\\"Type here\\">\\n<p>{{ text }}</p>\\n"},"description.md":"<h1 id=\\"form-bindings\\" tabindex=\\"-1\\">Form Bindings <a class=\\"header-anchor\\" href=\\"#form-bindings\\" aria-label=\\"Permalink to &quot;Form Bindings {#form-bindings}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>Using <code>v-bind</code> and <code>v-on</code> together, we can create two-way bindings on form input elements:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">input</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">value</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">text</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> @</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">input</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">onInput</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">methods</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  onInput</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(e) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // a v-on handler receives the native DOM event</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // as the argument.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">    this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.text </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> e.target.value</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">function</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> onInput</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#E36209;--shiki-dark:#FFAB70\\">e</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // a v-on handler receives the native DOM event</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // as the argument.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  text.value </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> e.target.value</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<p>Try typing in the input box - you should see the text in <code>&lt;p&gt;</code> updating as you type.</p>\\n<p>To simplify two-way bindings, Vue provides a directive, <code>v-model</code>, which is essentially syntactic sugar for the above:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">input</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-model</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">text</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p><code>v-model</code> automatically syncs the <code>&lt;input&gt;</code>'s value with the bound state, so we no longer need to use an event handler for that.</p>\\n<p><code>v-model</code> works not only on text inputs, but also on other input types such as checkboxes, radio buttons, and select dropdowns. We cover more details in <a target=\\"_blank\\" href=\\"/guide/essentials/forms.html\\">Guide - Form Bindings</a>.</p>\\n<p>Now, try to refactor the code to use <code>v-model</code> instead.</p>\\n","_hint":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const text = ref('')\\n\\n    return {\\n      text\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      text: ''\\n    }\\n  }\\n}\\n","template.html":"<input v-model=\\"text\\" placeholder=\\"Type here\\">\\n<p>{{ text }}</p>\\n"},"description.md":{}}},"step-6":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const awesome = ref(true)\\n\\n    function toggle() {\\n      // ...\\n    }\\n\\n    return {\\n      awesome,\\n      toggle\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      awesome: true\\n    }\\n  },\\n  methods: {\\n    toggle() {\\n      // ...\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"toggle\\">Toggle</button>\\n<h1>Vue is awesome!</h1>\\n<h1>Oh no 😢</h1>\\n"},"description.md":"<h1 id=\\"conditional-rendering\\" tabindex=\\"-1\\">Conditional Rendering <a class=\\"header-anchor\\" href=\\"#conditional-rendering\\" aria-label=\\"Permalink to &quot;Conditional Rendering {#conditional-rendering}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>We can use the <code>v-if</code> directive to conditionally render an element:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">awesome</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>Vue is awesome!&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>This <code>&lt;h1&gt;</code> will be rendered only if the value of <code>awesome</code> is <a href=\\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\\" target=\\"_blank\\" rel=\\"noreferrer\\">truthy</a>. If <code>awesome</code> changes to a <a href=\\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\\" target=\\"_blank\\" rel=\\"noreferrer\\">falsy</a> value, it will be removed from the DOM.</p>\\n<p>We can also use <code>v-else</code> and <code>v-else-if</code> to denote other branches of the condition:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-if</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">awesome</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>Vue is awesome!&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-else</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>Oh no 😢&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>Currently, the demo is showing both <code>&lt;h1&gt;</code>s at the same time, and the button does nothing. Try to add <code>v-if</code> and <code>v-else</code> directives to them, and implement the <code>toggle()</code> method so that we can use the button to toggle between them.</p>\\n<p>More details on <code>v-if</code>: <a target=\\"_blank\\" href=\\"/guide/essentials/conditional.html\\">Guide - Conditional Rendering</a></p>\\n","_hint":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const awesome = ref(true)\\n\\n    function toggle() {\\n      awesome.value = !awesome.value\\n    }\\n\\n    return {\\n      awesome,\\n      toggle\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      awesome: true\\n    }\\n  },\\n  methods: {\\n    toggle() {\\n      this.awesome = !this.awesome\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"toggle\\">Toggle</button>\\n<h1 v-if=\\"awesome\\">Vue is awesome!</h1>\\n<h1 v-else>Oh no 😢</h1>\\n"},"description.md":{}}},"step-7":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    // give each todo a unique id\\n    let id = 0\\n\\n    const newTodo = ref('')\\n    const todos = ref([\\n      { id: id++, text: 'Learn HTML' },\\n      { id: id++, text: 'Learn JavaScript' },\\n      { id: id++, text: 'Learn Vue' }\\n    ])\\n\\n    function addTodo() {\\n      // ...\\n      newTodo.value = ''\\n    }\\n\\n    function removeTodo(todo) {\\n      // ...\\n    }\\n\\n    return {\\n      newTodo,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"// give each todo a unique id\\nlet id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: '',\\n      todos: [\\n        { id: id++, text: 'Learn HTML' },\\n        { id: id++, text: 'Learn JavaScript' },\\n        { id: id++, text: 'Learn Vue' }\\n      ]\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      // ...\\n      this.newTodo = ''\\n    },\\n    removeTodo(todo) {\\n      // ...\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\" required placeholder=\\"new todo\\">\\n  <button>Add Todo</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    {{ todo.text }}\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n"},"description.md":"<h1 id=\\"list-rendering\\" tabindex=\\"-1\\">List Rendering <a class=\\"header-anchor\\" href=\\"#list-rendering\\" aria-label=\\"Permalink to &quot;List Rendering {#list-rendering}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>We can use the <code>v-for</code> directive to render a list of elements based on a source array:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">ul</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">li</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todo </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">in</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> todos</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> :</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">key</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todo.id</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    {{ todo.text }}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  &#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">li</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">ul</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>Here <code>todo</code> is a local variable representing the array element currently being iterated on. It's only accessible on or inside the <code>v-for</code> element, similar to a function scope.</p>\\n<p>Notice how we are also giving each todo object a unique <code>id</code>, and binding it as the <a target=\\"_blank\\" href=\\"/api/built-in-special-attributes.html#key\\">special <code>key</code> attribute</a> for each <code>&lt;li&gt;</code>. The <code>key</code> allows Vue to accurately move each <code>&lt;li&gt;</code> to match the position of its corresponding object in the array.</p>\\n<p>There are two ways to update the list:</p>\\n<ol>\\n<li>\\n<p>Call <a href=\\"https://stackoverflow.com/questions/9009879/which-javascript-array-functions-are-mutating\\" target=\\"_blank\\" rel=\\"noreferrer\\">mutating methods</a> on the source array:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todos.value.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">push</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(newTodo)</span></span></code></pre>\\n</div>  </div>\\n  <div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.todos.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">push</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(newTodo)</span></span></code></pre>\\n</div></div>\\n</li>\\n<li>\\n<p>Replace the array with a new one:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todos.value </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> todos.value.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">filter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/* ... */</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span></code></pre>\\n</div>  </div>\\n  <div class=\\"options-api\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.todos </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> this</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">.todos.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">filter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">/* ... */</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span></code></pre>\\n</div></div>\\n</li>\\n</ol>\\n<p>Here we have a simple todo list - try to implement the logic for <code>addTodo()</code> and <code>removeTodo()</code> methods to make it work!</p>\\n<p>More details on <code>v-for</code>: <a target=\\"_blank\\" href=\\"/guide/essentials/list.html\\">Guide - List Rendering</a></p>\\n","_hint":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    // give each todo a unique id\\n    let id = 0\\n\\n    const newTodo = ref('')\\n    const todos = ref([\\n      { id: id++, text: 'Learn HTML' },\\n      { id: id++, text: 'Learn JavaScript' },\\n      { id: id++, text: 'Learn Vue' }\\n    ])\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value })\\n      newTodo.value = ''\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"// give each todo a unique id\\nlet id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: '',\\n      todos: [\\n        { id: id++, text: 'Learn HTML' },\\n        { id: id++, text: 'Learn JavaScript' },\\n        { id: id++, text: 'Learn Vue' }\\n      ]\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo })\\n      this.newTodo = ''\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\" required placeholder=\\"new todo\\">\\n  <button>Add Todo</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    {{ todo.text }}\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n"},"description.md":{}}},"step-8":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    let id = 0\\n\\n    const newTodo = ref('')\\n    const hideCompleted = ref(false)\\n    const todos = ref([\\n      { id: id++, text: 'Learn HTML', done: true },\\n      { id: id++, text: 'Learn JavaScript', done: true },\\n      { id: id++, text: 'Learn Vue', done: false }\\n    ])\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value, done: false })\\n      newTodo.value = ''\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      hideCompleted,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"let id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: '',\\n      hideCompleted: false,\\n      todos: [\\n        { id: id++, text: 'Learn HTML', done: true },\\n        { id: id++, text: 'Learn JavaScript', done: true },\\n        { id: id++, text: 'Learn Vue', done: false }\\n      ]\\n    }\\n  },\\n  computed: {\\n    // ...\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo, done: false })\\n      this.newTodo = ''\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","style.css":".done {\\n  text-decoration: line-through;\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\" required placeholder=\\"new todo\\">\\n  <button>Add Todo</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    <input type=\\"checkbox\\" v-model=\\"todo.done\\">\\n    <span :class=\\"{ done: todo.done }\\">{{ todo.text }}</span>\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n<button @click=\\"hideCompleted = !hideCompleted\\">\\n  {{ hideCompleted ? 'Show all' : 'Hide completed' }}\\n</button>\\n"},"description.md":"<h1 id=\\"computed-property\\" tabindex=\\"-1\\">Computed Property <a class=\\"header-anchor\\" href=\\"#computed-property\\" aria-label=\\"Permalink to &quot;Computed Property {#computed-property}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>Let's keep building on top of the todo list from the last step. Here, we've already added a toggle functionality to each todo. This is done by adding a <code>done</code> property to each todo object, and using <code>v-model</code> to bind it to a checkbox:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">li</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-for</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todo </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">in</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> todos</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  &#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">input</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> type</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"checkbox\\"</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> v-model</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">todo.done</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">li</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>The next improvement we can add is to be able to hide already completed todos. We already have a button that toggles the <code>hideCompleted</code> state. But how do we render different list items based on that state?</p>\\n<div class=\\"options-api\\">\\n<p>Introducing <a target=\\"_blank\\" href=\\"/guide/essentials/computed.html\\">computed property</a>. We can declare a property that is reactively computed from other properties using the <code>computed</code> option:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  computed: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    filteredTodos</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // return filtered todos based on \`this.hideCompleted\`</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  computed: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    filteredTodos</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // return filtered todos based on \`this.hideCompleted\`</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"composition-api\\">\\n<p>Introducing <a target=\\"_blank\\" href=\\"/guide/essentials/computed.html\\"><code>computed()</code></a>. We can create a computed ref that computes its <code>.value</code> based on other reactive data sources:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ref, computed } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> hideCompleted</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">false</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> todos</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  /* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> filteredTodos</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> computed</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // return filtered todos based on</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // \`todos.value\` &#x26; \`hideCompleted.value\`</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { createApp, ref, computed } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> hideCompleted</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">false</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> todos</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      /* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    ])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> filteredTodos</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> computed</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // return filtered todos based on</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // \`todos.value\` &#x26; \`hideCompleted.value\`</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"language-diff vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">diff</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#B31D28;--shiki-dark:#FDAEB7\\">- &#x3C;li v-for=\\"todo in todos\\"></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">+ &#x3C;li v-for=\\"todo in filteredTodos\\"></span></span></code></pre>\\n</div><p>A computed property tracks other reactive state used in its computation as dependencies. It caches the result and automatically updates it when its dependencies change.</p>\\n<p>Now, try to add the <code>filteredTodos</code> computed property and implement its computation logic! If implemented correctly, checking off a todo when hiding completed items should instantly hide it as well.</p>\\n","_hint":{"App":{"composition.js":"import { ref, computed } from 'vue'\\n\\nexport default {\\n  setup() {\\n    let id = 0\\n\\n    const newTodo = ref('')\\n    const hideCompleted = ref(false)\\n    const todos = ref([\\n      { id: id++, text: 'Learn HTML', done: true },\\n      { id: id++, text: 'Learn JavaScript', done: true },\\n      { id: id++, text: 'Learn Vue', done: false }\\n    ])\\n\\n    const filteredTodos = computed(() => {\\n      return hideCompleted.value\\n        ? todos.value.filter((t) => !t.done)\\n        : todos.value\\n    })\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value, done: false })\\n      newTodo.value = ''\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      hideCompleted,\\n      todos,\\n      filteredTodos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"let id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: '',\\n      hideCompleted: false,\\n      todos: [\\n        { id: id++, text: 'Learn HTML', done: true },\\n        { id: id++, text: 'Learn JavaScript', done: true },\\n        { id: id++, text: 'Learn Vue', done: false }\\n      ]\\n    }\\n  },\\n  computed: {\\n    filteredTodos() {\\n      return this.hideCompleted\\n        ? this.todos.filter((t) => !t.done)\\n        : this.todos\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo, done: false })\\n      this.newTodo = ''\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\" required placeholder=\\"new todo\\">\\n  <button>Add Todo</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in filteredTodos\\" :key=\\"todo.id\\">\\n    <input type=\\"checkbox\\" v-model=\\"todo.done\\">\\n    <span :class=\\"{ done: todo.done }\\">{{ todo.text }}</span>\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n<button @click=\\"hideCompleted = !hideCompleted\\">\\n  {{ hideCompleted ? 'Show all' : 'Hide completed' }}\\n</button>\\n","style.css":".done {\\n  text-decoration: line-through;\\n}\\n"},"description.md":{}}},"step-9":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const pElementRef = ref(null)\\n\\n    return {\\n      pElementRef\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  // ...\\n}\\n","template.html":"<p ref=\\"pElementRef\\">Hello</p>\\n"},"description.md":"<h1 id=\\"lifecycle-and-template-refs\\" tabindex=\\"-1\\">Lifecycle and Template Refs <a class=\\"header-anchor\\" href=\\"#lifecycle-and-template-refs\\" aria-label=\\"Permalink to &quot;Lifecycle and Template Refs {#lifecycle-and-template-refs}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>So far, Vue has been handling all the DOM updates for us, thanks to reactivity and declarative rendering. However, inevitably there will be cases where we need to manually work with the DOM.</p>\\n<p>We can request a <strong>template ref</strong> - i.e. a reference to an element in the template - using the <a target=\\"_blank\\" href=\\"/api/built-in-special-attributes.html#ref\\">special <code>ref</code> attribute</a>:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">p</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">\\"pElementRef\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>hello&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">p</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>To access the ref, we need to declare<span class=\\"html\\"> and expose</span> a ref with matching name:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> pElementRef</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">null</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> pElementRef</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">null</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    pElementRef</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<p>Notice the ref is initialized with <code>null</code> value. This is because the element doesn't exist yet when <span class=\\"sfc\\"><code>&lt;script setup&gt;</code></span><span class=\\"html\\"><code>setup()</code></span> is executed. The template ref is only accessible after the component is <strong>mounted</strong>.</p>\\n<p>To run code after mount, we can use the <code>onMounted()</code> function:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { onMounted } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">onMounted</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">  // component is now mounted.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { onMounted } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">    onMounted</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(() </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=></span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">      // component is now mounted.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    })</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<p>The element will be exposed on <code>this.$refs</code> as <code>this.$refs.pElementRef</code>. However, you can only access it after the component is <strong>mounted</strong>.</p>\\n<p>To run code after mount, we can use the <code>mounted</code> option:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  mounted</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // component is now mounted.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" tabindex=\\"0\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  mounted</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">    // component is now mounted.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n</div>\\n<p>This is called a <strong>lifecycle hook</strong> - it allows us to register a callback to be called at certain times of the component's lifecycle. There are other hooks such as <span class=\\"options-api\\"><code>created</code> and <code>updated</code></span><span class=\\"composition-api\\"><code>onUpdated</code> and <code>onUnmounted</code></span>. Check out the <a target=\\"_blank\\" href=\\"/guide/essentials/lifecycle.html#lifecycle-diagram\\">Lifecycle Diagram</a> for more details.</p>\\n<p>Now, try to add <span class=\\"options-api\\">a <code>mounted</code></span><span class=\\"composition-api\\">an <code>onMounted</code></span> hook, access the <code>&lt;p&gt;</code> via <span class=\\"options-api\\"><code>this.$refs.pElementRef</code></span><span class=\\"composition-api\\"><code>pElementRef.value</code></span>, and perform some direct DOM operations on it (e.g. changing its <code>textContent</code>).</p>\\n","_hint":{"App":{"composition.js":"import { ref, onMounted } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const pElementRef = ref(null)\\n\\n    onMounted(() => {\\n      pElementRef.value.textContent = 'mounted!'\\n    })\\n\\n    return {\\n      pElementRef\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  mounted() {\\n    this.$refs.pElementRef.textContent = 'mounted!'\\n  }\\n}\\n","template.html":"<p ref=\\"pElementRef\\">Hello</p>\\n"},"description.md":{}}}}`),es={class:"tutorial"},as=["innerHTML"],ts={key:0,class:"hint"},ps=["href"],ls=["href"],hs=z({__name:"TutorialRepl",setup(os){const{vueVersion:B,defaultVersion:j,importMap:T}=H({runtimeDev:()=>`https://unpkg.com/vue@${B.value||j}/dist/vue.esm-browser.js`}),C=W({builtinImportMap:T}),f=m(),c=A("prefer-composition"),E=A("prefer-sfc"),t=m(""),g=Object.keys(e).sort((i,s)=>Number(i.replace(/^step-/,""))-Number(s.replace(/^step-/,""))),S=g.length,I=/<h1.*?>(.+?)<a class="header-anchor/,_=g.map((i,s)=>{const a=e[i]["description.md"];return{text:`${s+1}. ${a.match(I)[1]}`,link:`#${i}`}}),q=k(()=>{var i;return(i=e[t.value])==null?void 0:i["description.md"]}),F=k(()=>g.indexOf(t.value)+1),b=k(()=>{const i=t.value.match(/\d+/),s=i&&`step-${+i[0]-1}`;if(s&&e.hasOwnProperty(s))return s}),x=k(()=>{const i=t.value.match(/\d+/),s=i&&`step-${+i[0]+1}`;if(s&&e.hasOwnProperty(s))return s}),p=m(!1);function d(i=!1){let s=location.hash.slice(1);e.hasOwnProperty(s)||(s="step-1",location.replace(`/tutorial/#${s}`)),t.value=s;const a=p.value?e[s]._hint:e[s];C.setFiles(E.value?N(a,c.value):$(a,c.value),E.value?"App.vue":"index.html"),i&&is(()=>{f.value.scrollTop=0})}function M(){p.value=!p.value,d()}return Y([c,E],()=>d()),P(()=>{p.value=!1,d(!0)}),d(),(i,s)=>{var a;return l(),h("section",es,[r("article",{class:"instruction",ref_key:"instruction",ref:f},[o(O),o(n(Z),{button:`${F.value} / ${n(S)}`},{default:D(()=>[(l(!0),h(X,null,Q(n(_),(u,L)=>(l(),K(n(J),{class:ss(["vt-menu-link",{active:L+1===F.value}]),href:u.link},{default:D(()=>[y(w(u.text),1)]),_:2},1032,["class","href"]))),256))]),_:1},8,["button"]),r("div",{class:"vt-doc",innerHTML:q.value},null,8,as),(a=n(e)[t.value])!=null&&a._hint?(l(),h("div",ts,[r("button",{onClick:M},w(p.value?"Reset":"Show me!"),1)])):v("",!0),r("footer",null,[b.value?(l(),h("a",{key:0,href:`#${b.value}`},[o(n(G),{class:"vt-link-icon",style:{margin:"0"}}),s[1]||(s[1]=y(" Prev"))],8,ps)):v("",!0),x.value?(l(),h("a",{key:1,class:"next-step",href:`#${x.value}`},[s[2]||(s[2]=y("Next ")),o(n(U),{class:"vt-link-icon"})],8,ls)):v("",!0)])],512),o(n(R),{layout:"vertical",editor:n(V),store:n(C),showCompileOutput:!1,clearConsole:!1,showImportMap:!1,onKeyup:s[0]||(s[0]=u=>p.value=!1)},null,8,["editor","store"])])}}}),cs=ns(hs,[["__scopeId","data-v-8292ce44"]]);export{cs as default};
